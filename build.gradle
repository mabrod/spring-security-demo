buildscript {
	ext {
		springBoot = '1.5.4.RELEASE'
		springSession = '1.3.1.RELEASE'
		springSecurity = '4.2.3.RELEASE'
		uptodate = '1.6.3'
		log4j2 = '2.8.2'
		hibernateCore = '5.2.10.Final'
		hibernateValidator = '5.4.1.Final'
		postgresDriver = '42.1.1'
		hikariCp = '2.6.3'
		flyway = '4.2.0'
		guava = '22.0'
		bootstrap ='3.3.7'
		assertJ = '3.8.0'
		mockito = '2.8.47'
		thymeleaf = '3.0.6.RELEASE'
		thymeleafSpringSecurity = '3.0.2.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBoot}")
		classpath("com.ofg:uptodate-gradle-plugin:${uptodate}")
	}
}

plugins {
	id "io.spring.dependency-management" version "1.0.3.RELEASE"
	id "org.flywaydb.flyway" version "4.2.0"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.ofg.uptodate'

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

jar {
	baseName = 'spring_security_demo'
	version = '0.1'
}

flyway {
	url = project.property('flyway.url')
	user = project.property('flyway.user')
	password = project.property('flyway.password')
	schemas = project.property('flyway.schemas')
}

dependencyManagement {
	dependencies {
		dependency("org.springframework.boot:spring-boot-starter:${springBoot}") {
			exclude 'ch.qos.logback:logback-classic'
			exclude 'ch.qos.logback:logback-core'
			exclude 'spring-boot-starter-logging'
		}
        // to use Hikari over Tomcat's connection pool
		dependency("org.springframework.boot:spring-boot-starter-web:${springBoot}") {
			exclude 'spring-boot-starter-logging'
		}
		// exclude default logback logging to use log4j 2 improved logging framework
		dependency("org.springframework.boot:spring-boot-starter-jdbc:${springBoot}") {
			exclude 'spring-boot-starter-logging'
		}
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.apache.logging.log4j:log4j-core:${log4j2}")
	compile("org.apache.logging.log4j:log4j-api:${log4j2}")
	compile("org.apache.logging.log4j:log4j-web:${log4j2}")
	compile("org.hibernate:hibernate-core:${hibernateCore}")
	compile("org.hibernate:hibernate-entitymanager:${hibernateCore}")
	compile("org.hibernate:hibernate-validator:${hibernateValidator}")
	compile("org.hibernate:hibernate-hikaricp:${hibernateCore}")
	compile("com.zaxxer:HikariCP:${hikariCp}")
	compile("com.google.guava:guava:${guava}")
	compile("org.postgresql:postgresql:${postgresDriver}")
	compile("org.webjars:bootstrap:${bootstrap}")
	compile("org.thymeleaf:thymeleaf:${thymeleaf}")
	compile("org.thymeleaf:thymeleaf-spring4:${thymeleaf}")
	compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity4:${thymeleafSpringSecurity}")
	compile("org.flywaydb:flyway-core:${flyway}")

	testCompile("org.springframework.security:spring-security-test:${springSecurity}")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("org.assertj:assertj-core:${assertJ}")
	testCompile("org.mockito:mockito-core:${mockito}")

	runtime("org.apache.logging.log4j:log4j-core:${log4j2}")
	runtime("org.apache.logging.log4j:log4j-api:${log4j2}")
	runtime("org.apache.logging.log4j:log4j-web:${log4j2}")
}

bootRun {
	addResources = true
}